syntax = "proto3";

package pb;

// Represents a single key, used for gets.
message Key {
    string key = 1;
}

// Represents a single value, can be used for put etc.
message Value {
    int64 value = 1;
}

// Represent a key-value pair that is used to return results.
//message KeyValue {
//    string key = 1;
//    int64 value = 2;
//}

// Represent a void message indicating success
message Success {
}

// Represents an error.
message Error {
    string msg = 1;
}

// Represents an empty message
message Empty {}

// Represents an operation result.
message Result {
    repeated string suggestions = 1;
    Success s = 2;
}

// Internal representations for operations.
enum Op {
    GET = 0;
    SET = 1;
    CLEAR = 2;
}

// A type for arguments across all operations
message Command {
    Op operation = 1;
    oneof arg {
        Key get = 2;
        Key set = 3;
        Empty clear = 4;
    }
}
// Client to primary
message updateTrieRequest {
    string word = 1;	
}

message lookupTrieRequest {
	string prefix = 1;
}


message lookupTrieReply {
	//repeated string result = 1;
	int64 result = 1;
	bool success = 2;
}
// Primary to secondary
message updateSecondaryTrieRequest{
	string word = 1;
	int64 requestNumber = 2;
    string primaryId = 3;
}

message updateSecondaryTrieReply{
	int64 requestNumber = 1;
	bool success = 2;
	string peer = 3;
}

message controlRequest{
	int64 requestNumber = 1;
	string primaryId = 2;
}

message portInfo{
    string replId = 1;
}

message introInfo{
    string replId = 1;
    string trieId = 2;
}

message ackIntroInfo{
    bool success = 1;
}

message heartbeatMessage{
    string id = 1;
}


message heartbeatAckArg{
    portInfo key = 1;
    int64 val = 2;
}

message heartbeatAckMessage{
    portInfo id = 1;
    repeated heartbeatAckArg table = 2;
}

message primaryInitMessage{
    int64 requestNumber = 1;
    repeated portInfo secondaries = 2;
}

message addSecondaryMessage{
    portInfo secondaryReplId = 1;
    portInfo secondaryTrielId = 2;
}

message deleteSecondaryMessage{
    portInfo secondaryId = 1;
}

message SplitWord{
    string word = 1;
    int64 count = 2;
    int64 index = 3;
}

message SplitWordRequest{
    repeated SplitWord words = 1;
    string id = 2;
}

message ReplicateTrieRequest{
    repeated SplitWord words = 1;
}

message MaxTrieSize{
    int64 length = 1;
}




// Replication service
service Repl {
    rpc AckIntroduction(ackIntroInfo) returns (Empty) {} // Ack for Introduce StandBy
	rpc UpdateSecondary(updateSecondaryTrieRequest) returns (Empty)	{} // Updating Secondary Trie Node with single query
	rpc AckPrimary(updateSecondaryTrieReply) returns (Empty) {} // Ack from Secondary to Primary for trie update

    rpc Heartbeat(heartbeatMessage) returns (Empty) {} // Heartbeat from Manager to Primary

    rpc MakePrimary(primaryInitMessage) returns (Empty) {}
    rpc MakeSecondary(portInfo) returns (Empty) {}
    rpc MakeStandBy(Empty) returns (Empty) {}


    rpc DeleteSecondaryFromPrimaryList(deleteSecondaryMessage) returns (Empty) {}
    rpc AddSecondaryToPrimaryList(addSecondaryMessage) returns (Empty) {}


    rpc UpdateSecondaryAboutPrimary(portInfo) returns (Empty) {}


}

//Manager Service
service Manager {

    rpc IntroduceSelf(introInfo) returns (Empty) {} // Introduce standby to manager
    rpc HeartbeatAck(heartbeatAckMessage) returns (Empty) {} // Ack for heartbeat from primary to manager

    rpc getTriePortInfo(Key) returns (portInfo) {}


    //Split Trie RPCs
    rpc splitTrieRequest(portInfo) returns (Empty) {} // Message 1
    rpc splitTrieListRequest(SplitWordRequest) returns (Empty) {} //Message 3
    rpc splitTrieCreatedAck (portInfo) returns (Empty) {} //Message 5


}

// Trie service
service TrieStore {
    // Get the value associated with a key.

    rpc Get (Key) returns (Result) {}
    rpc Set (Key) returns (Result) {}

    rpc CheckSplit(MaxTrieSize) returns (Empty) {} //Message 0
    rpc AckSplitTrieRequest(Empty) returns (Empty) {} //Message 2
    rpc Create(SplitWordRequest) returns (Empty) {} //Message 4
    rpc splitTrieCreatedAck (Empty) returns (Empty) {} // Message 6


    rpc updateNewSecondary(portInfo) returns (Empty) {} // Update New Secondary to self
    rpc ReplicateTrie(ReplicateTrieRequest) returns (Empty) {} //Message 4

    rpc reset(Empty) returns (Empty) {}

}
